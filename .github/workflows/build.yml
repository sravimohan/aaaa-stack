# This GitHub Actions workflow builds and tests the application, then publishes it to an Amazon ECR repository.
# It is triggered on manual dispatch or when changes are pushed to the configured branches.
#
# Required Secrets:
# - AWS_ACCOUNT_ID: The AWS account ID where the ECR repository is located.
# - AWS_REGION: The AWS region where the ECR repository is located (e.g., us-west-2).
# - AWS_ACTIONS_ROLE_ARN_TO_ASSUME: The ARN of the IAM role to assume for GitHub Actions.

name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - ci

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Restore Dependencies
        run: dotnet restore ./AAAA.Server/AAAA.Server.csproj

      - name: Build Project
        run: dotnet build ./AAAA.Server/AAAA.Server.csproj --no-restore

      - name: Run Tests
        run: dotnet test ./AAAA.Server/AAAA.Server.csproj --no-build --verbosity normal

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: GitHubActionsRoleSession
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE_ARN_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Publish Docker Image to Amazon ECR
        working-directory: ./AAAA.Server/
        env:
          # Assuming the ecr name is the same as the github repository name
          # If not, you can set the name of the ecr repository here
          IMAGE_REPOSITORY_URL: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.event.repository.name }}"
        run: |
          dotnet publish -c Release -p:ContainerRepository="$IMAGE_REPOSITORY_URL" -p:ContainerImageTags="${{ github.ref_name }}-${{github.sha}};" -p:RuntimeIdentifier=linux-x64
          docker push $IMAGE_REPOSITORY_URL --all-tags
